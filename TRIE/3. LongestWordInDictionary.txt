struct Node{
    Node *links[26];
    bool flag = false;
    
    bool containsKey(char ch){
        return (links[ch-'a']!=NULL);
    }
    Node *get(char ch){
        return links[ch-'a'];
    }
    void put(char ch,Node *node){
        links[ch-'a']=node;
    }
    void setEnd(){
        flag=true;
    }
    bool isEnd(){
        return flag;
    }
};
class Trie{
    private:
    Node *root;

    public:
    Trie(){
        root = new Node();
    }
    void insert(string word){
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->containsKey(word[i])){
                node->put(word[i],new Node());
            }
            node=node->get(word[i]);
        }
        node->setEnd();
    }
    bool checkIfAllPrefixExists(string word){
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(node->containsKey(word[i])){
                node=node->get(word[i]);
                if(node->isEnd() == false)
                    return false;
            }else{
                return false;
            }
        }
        return true;
    }
};
class Solution {
public:
    string longestWord(vector<string>& words) {
        Trie *obj=new Trie();
        for(auto &it:words) 
            obj->insert(it);
        string longest="";
        for(auto word:words){
            if(obj->checkIfAllPrefixExists(word)){
                if(word.size()>longest.size()){
                    longest=word;
                }else if(word.size()==longest.size() && word<longest){
                    longest=word;
                }
            }
        }
        return longest;
    }
};